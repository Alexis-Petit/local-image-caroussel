{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["App","useState","image","setImage","files","setFiles","countdownValue","setCountdownValue","countdown","useRef","updateImage","a","length","randomIdx","getRandomInt","nextImage","filesCopy","splice","index","randomFile","arrayBuffer","buffer","blob","Blob","url","URL","createObjectURL","current","getApi","start","min","max","Math","ceil","floor","random","folderPickHandler","e","window","showDirectoryPicker","directoryHandle","listAllFilesAndDirs","handles","map","handle","getFile","console","log","dirHandle","kind","push","className","src","logo","alt","onClick","disabled","ref","onComplete","autoStart","date","Date","now","onChange","Number","target","value","defaultChecked","type","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2c978eb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport Countdown from 'react-countdown'\r\n\r\n\r\nfunction App() {\r\n\r\n  const [image, setImage] = useState(null)\r\n  const [files, setFiles] = useState(null)\r\n  const [countdownValue, setCountdownValue] = useState(60000)\r\n  const countdown = useRef(null)\r\n\r\n  const updateImage = async () => {\r\n    if (files && files.length>0) {\r\n      const randomIdx = getRandomInt(0, files.length-1)\r\n      nextImage(randomIdx)\r\n      const filesCopy = [...files]\r\n      filesCopy.splice(randomIdx, 1)\r\n      setFiles(filesCopy)\r\n    }\r\n  }\r\n\r\n  const nextImage = async (index) => {\r\n    const randomFile = await files[index]\r\n    const buffer = await randomFile.arrayBuffer()\r\n    const blob = new Blob([buffer])\r\n    const url = URL.createObjectURL(blob)\r\n    setImage(url)\r\n    countdown.current.getApi().start()\r\n  }\r\n\r\n  function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  const folderPickHandler = async (e) => {\r\n    try {\r\n      const directoryHandle = await window.showDirectoryPicker()\r\n      const handles = await listAllFilesAndDirs(directoryHandle)\r\n      await setFiles(handles.map(handle => handle.getFile()))\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async function listAllFilesAndDirs(dirHandle) {\r\n    const files = [];\r\n    for await (let [name, handle] of dirHandle) {\r\n      const { kind } = handle;\r\n      if (handle.kind === 'directory') {\r\n        files.push(handle);\r\n        files.push(...await listAllFilesAndDirs(handle));\r\n      } else {\r\n        files.push(handle);\r\n      }\r\n    }\r\n    return files;\r\n  }\r\n\r\n  const onChangeCountdownValue = (e) => {\r\n    setCountdownValue(Number(e.target.value))\r\n  }\r\n\r\n  const startHandler = (e) => {\r\n    updateImage()\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {image === null ? <img src={logo} className=\"App-logo\" alt=\"logo\" /> : <img src={image} className=\"random-image\" alt=\"logo\" />}\r\n        <button onClick={folderPickHandler}>Pick a folder</button>\r\n        <button disabled={!files} onClick={startHandler}>Start</button>\r\n        <Countdown\r\n          ref={countdown}\r\n          onComplete={updateImage}\r\n          autoStart={false}\r\n          date={Date.now() + countdownValue} />\r\n        <div onChange={onChangeCountdownValue}>\r\n          <input defaultChecked={countdownValue===3000} type=\"radio\" value=\"3000\" name=\"gender\" /> 3s\r\n          <input defaultChecked={countdownValue===15000}type=\"radio\" value=\"15000\" name=\"gender\" /> 15s\r\n          <input defaultChecked={countdownValue===30000}type=\"radio\" value=\"30000\" name=\"gender\" /> 30s\r\n          <input defaultChecked={countdownValue===60000}type=\"radio\" value=\"60000\" name=\"gender\" /> 1m\r\n          <input defaultChecked={countdownValue===120000} type=\"radio\" value=\"120000\" name=\"gender\" /> 2m\r\n          <input defaultChecked={countdownValue===300000} type=\"radio\" value=\"300000\" name=\"gender\" /> 5m\r\n        </div>\r\n    \r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}