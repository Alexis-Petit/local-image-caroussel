{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","image","setImage","files","setFiles","countdownValue","setCountdownValue","countdown","useRef","updateImage","a","length","randomIdx","getRandomInt","nextImage","filesCopy","splice","index","randomFile","arrayBuffer","buffer","blob","Blob","url","URL","createObjectURL","current","getApi","start","min","max","Math","ceil","floor","random","folderPickHandler","e","window","showDirectoryPicker","directoryHandle","listAllFilesAndDirs","handles","map","handle","getFile","console","log","dirHandle","kind","push","className","src","logo","alt","onClick","disabled","ref","onComplete","autoStart","date","Date","now","onChange","Number","target","value","defaultChecked","type","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a94ae2f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport Countdown from 'react-countdown'\n\n\nfunction App() {\n\n  const [image, setImage] = useState(null)\n  const [files, setFiles] = useState(null)\n  const [countdownValue, setCountdownValue] = useState(60000)\n  const countdown = useRef(null)\n\n  const updateImage = async () => {\n    if (files && files.length>0) {\n      const randomIdx = getRandomInt(0, files.length-1)\n      nextImage(randomIdx)\n      const filesCopy = [...files]\n      filesCopy.splice(randomIdx, 1)\n      setFiles(filesCopy)\n    }\n  }\n\n  const nextImage = async (index) => {\n    const randomFile = await files[index]\n    const buffer = await randomFile.arrayBuffer()\n    const blob = new Blob([buffer])\n    const url = URL.createObjectURL(blob)\n    setImage(url)\n    countdown.current.getApi().start()\n  }\n\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  const folderPickHandler = async (e) => {\n    try {\n      const directoryHandle = await window.showDirectoryPicker()\n      const handles = await listAllFilesAndDirs(directoryHandle)\n      await setFiles(handles.map(handle => handle.getFile()))\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function listAllFilesAndDirs(dirHandle) {\n    const files = [];\n    for await (let [name, handle] of dirHandle) {\n      const { kind } = handle;\n      if (handle.kind === 'directory') {\n        files.push(handle);\n        files.push(...await listAllFilesAndDirs(handle));\n      } else {\n        files.push(handle);\n      }\n    }\n    return files;\n  }\n\n  const onChangeCountdownValue = (e) => {\n    setCountdownValue(Number(e.target.value))\n  }\n\n  const startHandler = (e) => {\n    updateImage()\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {image === null ? <img src={logo} className=\"App-logo\" alt=\"logo\" /> : <img src={image} className=\"random-image\" alt=\"logo\" />}\n        <button onClick={folderPickHandler}>Pick a folder</button>\n        <button disabled={!files} onClick={startHandler}>Start</button>\n        <Countdown\n          ref={countdown}\n          onComplete={updateImage}\n          autoStart={false}\n          date={Date.now() + countdownValue} />\n        <div onChange={onChangeCountdownValue}>\n          <input defaultChecked={countdownValue===3000} type=\"radio\" value=\"3000\" name=\"gender\" /> 3s\n          <input defaultChecked={countdownValue===15000}type=\"radio\" value=\"15000\" name=\"gender\" /> 15s\n          <input defaultChecked={countdownValue===30000}type=\"radio\" value=\"30000\" name=\"gender\" /> 30s\n          <input defaultChecked={countdownValue===60000}type=\"radio\" value=\"60000\" name=\"gender\" /> 1m\n          <input defaultChecked={countdownValue===120000} type=\"radio\" value=\"120000\" name=\"gender\" /> 2m\n          <input defaultChecked={countdownValue===280000} type=\"radio\" value=\"280000\" name=\"gender\" /> 5m\n        </div>\n    \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}